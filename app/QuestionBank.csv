question_text,expected_answer,technology,bloom_level,bloom_score,complexity_score
"What is the difference between JDK, JRE, and JVM?",JDK (Java Development Kit) contains development tools and JRE. JRE (Java Runtime Environment) contains JVM and libraries needed to run Java applications. JVM (Java Virtual Machine) executes Java bytecode and provides platform independence.,java,Analyze,4,3
What is the main method in Java?,The main method is the entry point of a Java program. It has the signature 'public static void main(String[] args)' and must be present in every executable Java class. The JVM calls this method to start program execution.,java,Remember,1,2
What are the primitive data types in Java?,"Java has 8 primitive data types: byte (1 byte), short (2 bytes), int (4 bytes), long (8 bytes), float (4 bytes), double (8 bytes), char (2 bytes), and boolean (1 bit). These are stored directly in memory and not as objects.",java,Remember,1,2
What is the difference between == and equals() method?,"== compares references (memory addresses) for objects and values for primitives. equals() method compares the actual content/values of objects. For String comparison, use equals() to compare values, not ==.",java,Analyze,4,4
What is a constructor in Java?,"A constructor is a special method that initializes objects when they are created. It has the same name as the class, no return type, and is called automatically when an object is instantiated using the 'new' keyword.",java,Remember,1,2
What is method overloading?,"Method overloading allows multiple methods with the same name but different parameters (different number, type, or order). The compiler determines which method to call based on the arguments provided at compile time.",java,Remember,1,3
"What is the difference between String, StringBuilder, and StringBuffer?","String is immutable - creates new objects for modifications. StringBuilder is mutable and not thread-safe, best for single-threaded operations. StringBuffer is mutable and thread-safe but slower due to synchronization.",java,Analyze,4,4
What is static keyword in Java?,"Static keyword creates class-level members that belong to the class rather than instances. Static variables are shared among all instances, static methods can be called without creating objects, and static blocks execute when the class is first loaded.",java,Remember,1,3
What is final keyword in Java?,"Final keyword restricts modification. Final variables cannot be reassigned, final methods cannot be overridden, and final classes cannot be extended. It ensures immutability and prevents inheritance when needed.",java,Remember,1,3
What is the difference between abstract class and interface?,"Abstract classes can have both abstract and concrete methods, constructors, and instance variables. Interfaces can only have abstract methods (until Java 8), constants, and support multiple inheritance. Java 8+ interfaces can have default and static methods.",java,Analyze,4,5
What is inheritance in Java?,Inheritance allows a class to acquire properties and methods from another class using 'extends' keyword. It promotes code reusability and establishes IS-A relationship. Java supports single inheritance for classes but multiple inheritance through interfaces.,java,Remember,1,3
What is polymorphism in Java?,"Polymorphism allows objects of different classes to be treated as objects of a common base class. It includes method overriding (runtime polymorphism) and method overloading (compile-time polymorphism), enabling flexible and reusable code.",java,Remember,1,4
What is encapsulation in Java?,"Encapsulation bundles data and methods that operate on that data within a single unit (class) and restricts direct access to some components. It's achieved using access modifiers (private, protected, public) and provides data hiding and security.",java,Remember,1,3
What is abstraction in Java?,"Abstraction hides implementation details and shows only essential features to the user. It's achieved through abstract classes and interfaces, allowing users to focus on what an object does rather than how it does it.",java,Remember,1,4
What is method overriding?,Method overriding allows a subclass to provide a specific implementation of a method already defined in its parent class. It enables runtime polymorphism and requires the same method signature as the parent class method.,java,Remember,1,3
What is super keyword in Java?,"Super keyword refers to the immediate parent class object. It's used to access parent class methods, constructors, and variables when they are overridden or hidden in the child class. Super() calls parent constructor.",java,Remember,1,3
What is this keyword in Java?,"This keyword refers to the current object instance. It's used to differentiate between instance variables and parameters with the same name, call other constructors in the same class, and pass the current object as a parameter.",java,Remember,1,2
What is ArrayList in Java?,"ArrayList is a resizable array implementation of the List interface. It provides dynamic arrays that can grow and shrink in size, allows duplicate elements, maintains insertion order, and provides random access to elements.",java,Remember,1,3
What is HashMap in Java?,"HashMap stores key-value pairs using hashing for fast retrieval. It allows null values and one null key, doesn't maintain order, and provides O(1) average time complexity for basic operations like get() and put().",java,Remember,1,4
What is the difference between HashMap and HashSet?,HashMap stores key-value pairs and allows duplicate values but unique keys. HashSet stores only unique elements (no duplicates) and is internally implemented using HashMap where elements are stored as keys with a dummy value.,java,Analyze,4,4
What is the difference between ArrayList and LinkedList?,ArrayList uses dynamic arrays providing fast random access (O(1)) but slow insertion/deletion in middle (O(n)). LinkedList uses doubly-linked nodes providing fast insertion/deletion (O(1)) but slow random access (O(n)).,java,Analyze,4,5
What is exception handling in Java?,"Exception handling manages runtime errors using try-catch-finally blocks. Try contains code that might throw exceptions, catch handles specific exceptions, and finally executes cleanup code regardless of whether exceptions occur.",java,Remember,1,4
What is the difference between checked and unchecked exceptions?,"Checked exceptions must be handled at compile time using try-catch or throws declaration (e.g., IOException). Unchecked exceptions occur at runtime and don't require explicit handling (e.g., NullPointerException, ArrayIndexOutOfBoundsException).",java,Analyze,4,5
What is multithreading in Java?,Multithreading enables concurrent execution of multiple threads within a program. It's achieved by extending Thread class or implementing Runnable interface. Java provides synchronization mechanisms to handle shared resources safely.,java,Remember,1,6
What is synchronization in Java?,"Synchronization controls access to shared resources in multithreaded environments to prevent data corruption. It's implemented using synchronized keyword, locks, or concurrent collections to ensure thread safety.",java,Remember,1,6
What is garbage collection in Java?,Garbage collection automatically manages memory by removing objects that are no longer referenced. The JVM periodically runs garbage collector using algorithms like mark-and-sweep to free up memory and prevent memory leaks.,java,Remember,1,7
What is Spring Framework?,"Spring is a comprehensive framework for enterprise Java development providing dependency injection, aspect-oriented programming, and integration with other technologies. It simplifies Java development and promotes loose coupling through IoC container.",java,Remember,1,5
What is dependency injection in Spring?,"Dependency injection is a design pattern where Spring container provides dependencies to objects rather than objects creating them. It promotes loose coupling and is implemented through constructor injection, setter injection, or field injection.",java,Remember,1,5
What is RESTful web service?,"REST (Representational State Transfer) is an architectural style for web services using HTTP methods (GET, POST, PUT, DELETE). It uses stateless communication, JSON/XML data formats, and URL-based resource identification.",java,Remember,1,4
What is JPA and Hibernate?,"JPA (Java Persistence API) is a specification for object-relational mapping in Java. Hibernate is a popular JPA implementation that provides automatic mapping between Java objects and database tables, reducing boilerplate code.",java,Remember,1,6
What is the difference between Composition and Aggregation relationships in Java?,"Composition is a strong 'part-of' relationship where child objects cannot exist without parent (House-Room). Aggregation is a weaker 'has-a' relationship where child objects can exist independently (Department-Employee). Composition implies ownership and lifecycle dependency, while aggregation implies usage without ownership.",java,Analyze,4,6
What is the difference between ClassLoader and Class.forName()?,"ClassLoader loads classes into JVM memory without initializing static blocks or variables. Class.forName() loads and initializes the class, executing static blocks and initializing static variables. ClassLoader provides more control over the loading process, while Class.forName() is simpler for basic class loading needs.",java,Analyze,4,8
What is the Proxy pattern and how is it implemented in Java?,"Proxy pattern provides a surrogate or placeholder for another object to control access to it. Java implements it through java.lang.reflect.Proxy for interfaces or CGLIB for classes. Dynamic proxies are created at runtime and can intercept method calls, commonly used in frameworks like Spring for AOP and transaction management.",java,Create,6,7
What is the difference between BiFunction and Function in Java 8?,"Function takes one argument and returns a result (T -> R). BiFunction takes two arguments and returns a result ((T, U) -> R). Both are functional interfaces used with lambda expressions and method references. BiFunction is useful for operations requiring two inputs like mathematical operations or comparisons.",java,Analyze,4,5
What is the difference between CopyOnWriteArrayList and Collections.synchronizedList()?,"CopyOnWriteArrayList creates a new copy of the underlying array for every write operation, making it thread-safe for concurrent reads but expensive for writes. Collections.synchronizedList() wraps an existing list with synchronized methods but requires external synchronization for iteration to avoid ConcurrentModificationException.",java,Analyze,4,8
What is the Builder pattern and when should it be used?,"Builder pattern constructs complex objects step by step, separating construction from representation. It's useful for objects with many optional parameters, avoiding telescoping constructors. Java implementations often use method chaining with a static inner Builder class, providing readable and flexible object creation.",java,Evaluate,5,6
What is the difference between Predicate and Function in Stream operations?,"Predicate represents a boolean-valued function used for filtering operations like filter(). It takes one argument and returns boolean. Function represents a transformation operation used in map(), taking one argument and returning a different type. Predicate tests conditions, Function transforms data.",java,Analyze,4,5
What is the difference between Serial and Parallel Garbage Collectors?,"Serial GC uses a single thread for garbage collection, suitable for small applications with heap sizes under 100MB. Parallel GC uses multiple threads for both young and old generation collection, better for multi-core systems and larger heaps. Serial has lower overhead, Parallel has better throughput.",java,Analyze,4,8
What is the Observer pattern and how is it used in Java?,"Observer pattern defines a one-to-many dependency between objects, where changes in one object notify all dependents automatically. Java provided Observable class and Observer interface (deprecated in Java 9). Modern implementations use custom event listeners, PropertyChangeListener, or reactive frameworks like RxJava.",java,Apply,3,6
What is the difference between blocking and non-blocking I/O in Java?,"Blocking I/O operations halt thread execution until completion, using traditional java.io package. Non-blocking I/O allows threads to continue execution while I/O operations proceed asynchronously, using java.nio package with channels, selectors, and buffers. NIO is more scalable for handling many concurrent connections.",java,Analyze,4,7
What is the Template Method pattern in Java?,"Template Method pattern defines the skeleton of an algorithm in a base class, letting subclasses override specific steps without changing the algorithm structure. The template method is usually final to prevent modification, while hook methods are protected and can be overridden by subclasses.",java,Remember,1,5
What is the difference between AtomicInteger and volatile int?,"AtomicInteger provides atomic operations like compareAndSet(), incrementAndGet() using lock-free algorithms (CAS). volatile int only guarantees visibility of changes across threads but doesn't provide atomic compound operations. AtomicInteger is thread-safe for complex operations, volatile is only for simple reads/writes.",java,Analyze,4,8
What is the Decorator pattern and how is it implemented in Java?,Decorator pattern adds new functionality to objects without altering their structure by wrapping them in decorator objects. Java I/O classes extensively use this pattern (BufferedReader wrapping FileReader). It provides a flexible alternative to subclassing for extending functionality at runtime.,java,Create,6,7
What is the difference between Spliterator and Iterator?,"Iterator traverses collections sequentially with hasNext() and next() methods. Spliterator supports both sequential and parallel traversal, can split itself for parallel processing, and provides characteristics like ORDERED, DISTINCT. Spliterators are used internally by Stream API for parallel operations.",java,Analyze,4,7
What is method reference and constructor reference in Java 8?,"Method references provide shorthand syntax for lambda expressions that call existing methods. Types include static method (Class::method), instance method (object::method), and constructor references (Class::new). Constructor references create new instances and can be used with Supplier functional interface or Stream operations.",java,Remember,1,4
What is the difference between Fork-Join pool and Thread pool?,"Fork-Join pool is designed for divide-and-conquer algorithms using work-stealing queues, where tasks can spawn subtasks. Thread pools execute independent tasks using a fixed number of threads. Fork-Join is optimized for recursive parallelism and CPU-intensive tasks, while Thread pools are better for I/O-bound tasks.",java,Analyze,4,8
What is the Strategy pattern and its benefits?,"Strategy pattern encapsulates algorithms in separate classes and makes them interchangeable at runtime. It defines a family of algorithms, encapsulates each one, and makes them interchangeable. Benefits include eliminating conditional statements, supporting Open/Closed principle, and enabling runtime algorithm selection.",java,Remember,1,5
What is the difference between LinkedHashMap and TreeMap?,"LinkedHashMap maintains insertion order using a doubly-linked list, provides O(1) access time, and allows null values. TreeMap maintains natural ordering using a Red-Black tree, provides O(log n) access time, doesn't allow null keys, and implements NavigableMap with additional navigation methods.",java,Analyze,4,5
What is Phantom Reference and when is it used?,"Phantom Reference is the weakest reference type, used for cleanup operations after an object becomes unreachable. Unlike other references, get() always returns null. It's queued in ReferenceQueue only after finalization, making it useful for resource cleanup that must happen after garbage collection.",java,Evaluate,5,9
What is the Command pattern in Java?,"Command pattern encapsulates requests as objects, allowing parameterization of clients with different requests, queuing of requests, and support for undo operations. It decouples the object that invokes the operation from the one that performs it, commonly used in GUI frameworks and macro recording.",java,Remember,1,5
What is the difference between Collectors.toList() and Stream.collect()?,"Collectors.toList() is a predefined collector that creates an ArrayList from stream elements. Stream.collect() is a generic method that accepts any Collector, allowing custom reduction operations. collect() provides more flexibility with custom collectors, while toList() is optimized for the common use case of creating lists.",java,Analyze,4,4
What is the difference between Heap dump and Thread dump?,"Heap dump captures the state of JVM heap memory at a specific time, showing object instances, references, and memory usage. Thread dump captures the state of all JVM threads, showing stack traces, thread states, and lock information. Heap dumps debug memory issues, thread dumps debug performance and deadlock issues.",java,Analyze,4,7
What is the Adapter pattern and its implementation in Java?,"Adapter pattern allows incompatible interfaces to work together by wrapping one interface with another. Java examples include Arrays.asList() adapting arrays to List interface, and InputStreamReader adapting InputStream to Reader. It enables code reuse by making existing classes work with others without modifying their source code.",java,Apply,3,6
What is the difference between Semaphore and CountDownLatch?,"Semaphore controls access to a resource pool by maintaining permits that can be acquired and released multiple times. CountDownLatch is a one-time synchronization aid where threads wait for a count to reach zero. Semaphore is reusable and controls concurrent access, CountDownLatch is single-use and waits for completion.",java,Analyze,4,7
What is the Flyweight pattern and when should it be used?,"Flyweight pattern minimizes memory usage by sharing common data among multiple objects. Intrinsic state (shared) is separated from extrinsic state (context-specific). Java String pool is a classic example. Use when you have many objects with shared data, memory is a concern, and object creation is expensive.",java,Evaluate,5,8
What is the difference between Stream.of() and Arrays.stream()?,"Stream.of() creates a stream from individual elements or varargs, working with any object type. Arrays.stream() creates a stream specifically from arrays, with overloaded methods for primitive arrays (int[], double[]). Arrays.stream() is more efficient for array sources and handles primitive types better.",java,Analyze,4,4
What is the State pattern in Java?,"State pattern allows an object to alter its behavior when its internal state changes, appearing as if the object changed its class. It encapsulates state-specific behavior in separate state classes and delegates requests to the current state object. Commonly used in state machines and workflow systems.",java,Remember,1,6
What is the difference between ParallelStream and Sequential Stream?,Sequential streams process elements one at a time in a single thread. Parallel streams divide the data source into segments and process them concurrently using ForkJoinPool. Parallel streams are beneficial for CPU-intensive operations on large datasets but have overhead and may not improve performance for small datasets or I/O operations.,java,Analyze,4,6
What is the Chain of Responsibility pattern?,Chain of Responsibility pattern passes requests along a chain of handlers until one handles it. Each handler has a reference to the next handler and decides whether to process the request or pass it along. It decouples senders from receivers and allows dynamic chain composition. Common in logging frameworks and servlet filters.,java,Remember,1,6
What is the difference between Direct Memory and Heap Memory in NIO?,"Direct memory (off-heap) is allocated outside JVM heap using ByteBuffer.allocateDirect(), providing faster I/O operations by avoiding copying between JVM and native memory. Heap memory is managed by garbage collector but requires copying for I/O. Direct memory has faster I/O but slower allocation/deallocation and no automatic garbage collection.",java,Analyze,4,9
Why is Java platform independent?,"Java is platform independent because it compiles source code into bytecode, which runs on the JVM. The JVM acts as an abstraction layer between the bytecode and the operating system, allowing the same bytecode to run on different platforms without modification.",java,Remember,1,3
What are the main features of Java?,"Key Java features include: Object-oriented programming, platform independence, automatic memory management (garbage collection), multithreading support, security features, robustness, and a rich API library.",java,Remember,1,2
What is a constructor in Java?,"A constructor is a special method that is called when an object is created. It has the same name as the class, no return type, and is used to initialize object properties. Java provides a default constructor if none is explicitly defined.",java,Remember,1,2
What is method overloading?,"Method overloading allows multiple methods with the same name but different parameter lists (different number, type, or order of parameters). It's a compile-time polymorphism feature that enables methods to handle different types of input.",java,Remember,1,3
What is method overriding?,Method overriding occurs when a subclass provides a specific implementation of a method that is already defined in its parent class. The method in the subclass must have the same signature as in the parent class and uses the @Override annotation.,java,Remember,1,4
What are access modifiers in Java?,"Access modifiers control the visibility of classes, methods, and variables. The four types are: private (same class only), default/package-private (same package), protected (same package and subclasses), and public (accessible everywhere).",java,Remember,1,3
"What is the difference between String, StringBuilder, and StringBuffer?","String is immutable, creating new objects for modifications. StringBuilder is mutable and not thread-safe, making it faster for single-threaded operations. StringBuffer is mutable and thread-safe, suitable for multi-threaded environments but slower than StringBuilder.",java,Analyze,4,4
What is inheritance in Java?,Inheritance is a mechanism where a new class (subclass/child) inherits properties and methods from an existing class (superclass/parent). It promotes code reusability and establishes an 'is-a' relationship between classes using the 'extends' keyword.,java,Remember,1,3
What is encapsulation?,"Encapsulation is the bundling of data (variables) and methods that operate on that data within a single unit (class). It restricts direct access to some components using access modifiers, providing data hiding and increasing security.",java,Remember,1,3
What is polymorphism in Java?,Polymorphism means 'many forms' and allows objects of different types to be treated as objects of a common base type. It includes compile-time polymorphism (method overloading) and runtime polymorphism (method overriding).,java,Remember,1,4
What is abstraction in Java?,"Abstraction hides complex implementation details and shows only essential features. It's achieved through abstract classes and interfaces, allowing users to focus on what an object does rather than how it does it.",java,Remember,1,4
What is the difference between abstract class and interface?,"Abstract classes can have both abstract and concrete methods, constructors, and instance variables. Interfaces (before Java 8) could only have abstract methods and constants. Java 8+ interfaces can have default and static methods. A class can implement multiple interfaces but extend only one abstract class.",java,Analyze,4,5
What is the static keyword in Java?,"The static keyword belongs to the class rather than any instance. Static variables are shared among all instances, static methods can be called without creating objects, and static blocks are executed when the class is first loaded.",java,Remember,1,3
What is the final keyword in Java?,"The final keyword prevents modification. Final variables cannot be reassigned, final methods cannot be overridden, and final classes cannot be extended. It's used for creating constants and preventing inheritance.",java,Remember,1,3
What is exception handling in Java?,"Exception handling is a mechanism to handle runtime errors gracefully using try-catch-finally blocks. It allows programs to continue execution even when errors occur, improving robustness and user experience.",java,Remember,1,4
What is the difference between checked and unchecked exceptions?,"Checked exceptions must be handled at compile time (IOException, SQLException). Unchecked exceptions are runtime exceptions that don't need explicit handling (NullPointerException, ArrayIndexOutOfBoundsException). Checked exceptions extend Exception, unchecked extend RuntimeException.",java,Analyze,4,5
What is the difference between throw and throws?,"throw is used to explicitly throw an exception within a method. throws is used in method signatures to declare that a method might throw certain exceptions, indicating that the caller should handle them.",java,Analyze,4,4
What is a thread in Java?,"A thread is a lightweight subprocess that allows concurrent execution of multiple parts of a program. Threads can be created by extending the Thread class or implementing the Runnable interface, enabling multitasking within applications.",java,Remember,1,5
What is synchronization in Java?,"Synchronization controls access to shared resources in multithreaded environments. It prevents race conditions and ensures thread safety using synchronized methods, synchronized blocks, or explicit locks.",java,Remember,1,6
What is garbage collection in Java?,"Garbage collection is automatic memory management that removes objects that are no longer referenced by the program. It prevents memory leaks and runs in the background, freeing developers from manual memory management.",java,Remember,1,7
What are the different types of memory areas in JVM?,"JVM memory includes: Heap (object storage), Stack (method calls and local variables), Method Area (class metadata), PC Register (program counter), and Native Method Stack (native method calls). Heap is further divided into Young and Old generations.",java,Remember,1,7
What is the difference between == and equals() method?,"== compares references (memory addresses) for objects and values for primitives. equals() method compares the actual content of objects. For strings, == checks if they refer to the same object, while equals() checks if they have the same content.",java,Analyze,4,4
What is autoboxing and unboxing?,Autoboxing is the automatic conversion of primitive types to their corresponding wrapper classes (int to Integer). Unboxing is the reverse process (Integer to int). This feature simplifies code when working with collections and generics.,java,Remember,1,3
What are wrapper classes in Java?,"Wrapper classes are object representations of primitive data types (Integer, Double, Boolean, Character, etc.). They provide utility methods, enable primitives to be used in collections, and support autoboxing/unboxing.",java,Remember,1,3
What is a package in Java?,"A package is a namespace that organizes related classes and interfaces. It provides access protection, prevents naming conflicts, and makes code more maintainable. The package statement must be the first line in a Java file.",java,Remember,1,2
What is the import statement in Java?,The import statement allows you to use classes and interfaces from other packages without fully qualifying their names. It makes code more readable and reduces typing. Static imports allow importing static members directly.,java,Remember,1,2
What is a lambda expression in Java?,"Lambda expressions, introduced in Java 8, provide a concise way to represent anonymous functions. They enable functional programming paradigms and are commonly used with functional interfaces and streams for more readable and expressive code.",java,Remember,1,5
What is a functional interface?,"A functional interface has exactly one abstract method and can be used with lambda expressions. Common examples include Runnable, Callable, and Comparator. The @FunctionalInterface annotation ensures the interface has only one abstract method.",java,Remember,1,4
What is the Stream API in Java?,"The Stream API provides a functional approach to processing collections of objects. It supports operations like filter, map, reduce, and collect, enabling declarative programming style with lazy evaluation and parallel processing capabilities.",java,Remember,1,6
What is the difference between ArrayList and LinkedList?,ArrayList uses dynamic arrays with fast random access (O(1)) but slow insertion/deletion in the middle (O(n)). LinkedList uses doubly-linked nodes with fast insertion/deletion (O(1)) but slow random access (O(n)).,java,Analyze,4,5
What is the difference between HashSet and TreeSet?,"HashSet uses hashing for O(1) average performance, doesn't maintain order, and allows null values. TreeSet uses a balanced tree structure for O(log n) performance, maintains sorted order, and doesn't allow null values.",java,Analyze,4,5
What is the difference between HashMap and TreeMap?,"HashMap uses hashing for O(1) average performance, doesn't maintain order, and allows null keys/values. TreeMap uses a balanced tree for O(log n) performance, maintains sorted order by keys, and doesn't allow null keys.",java,Analyze,4,5
What is the Collections framework in Java?,"The Collections framework provides a unified architecture for storing and manipulating groups of objects. It includes interfaces (Collection, List, Set, Map), implementations (ArrayList, HashSet, HashMap), and algorithms (sort, search).",java,Remember,1,4
What is the difference between Comparable and Comparator?,"Comparable interface is implemented by classes to define natural ordering using compareTo() method. Comparator is a separate interface for custom ordering logic using compare() method, allowing multiple sorting strategies.",java,Analyze,4,5
What is serialization in Java?,Serialization is the process of converting objects into byte streams for storage or transmission. Classes must implement Serializable interface. Deserialization reconstructs objects from byte streams. The serialVersionUID helps maintain compatibility.,java,Remember,1,5
What is the transient keyword?,"The transient keyword prevents fields from being serialized. When an object is serialized, transient fields are ignored and their values are not included in the serialized form. They are initialized to default values during deserialization.",java,Remember,1,4
What is reflection in Java?,"Reflection allows inspection and manipulation of classes, methods, fields, and constructors at runtime. It provides the ability to examine class structure, invoke methods dynamically, and create instances without compile-time knowledge.",java,Remember,1,7
What is the difference between ClassNotFoundException and NoClassDefFoundError?,ClassNotFoundException is a checked exception thrown when trying to load a class that doesn't exist in the classpath. NoClassDefFoundError is an error thrown when a class was available at compile time but not at runtime.,java,Analyze,4,6
What is the volatile keyword in Java?,The volatile keyword ensures that changes to a variable are immediately visible to all threads. It prevents compiler optimizations that might cache the variable's value and provides happens-before guarantees for thread synchronization.,java,Remember,1,7
What is the difference between wait() and sleep()?,"wait() releases the lock and waits for notification, used for inter-thread communication. sleep() pauses execution for a specific time without releasing locks. wait() is called on objects, sleep() is a static method of Thread class.",java,Analyze,4,6
What is deadlock in Java?,"Deadlock occurs when two or more threads are blocked forever, each waiting for the other to release a resource. It happens when threads acquire locks in different orders. Prevention strategies include lock ordering and timeout mechanisms.",java,Remember,1,7
What is the difference between process and thread?,A process is an independent program execution with its own memory space. A thread is a lightweight subprocess that shares memory with other threads in the same process. Threads have faster creation and context switching than processes.,java,Analyze,4,5
What is the Executor framework?,"The Executor framework provides a higher-level API for managing threads. It includes thread pools, scheduled execution, and task submission mechanisms. Common implementations include ThreadPoolExecutor and ScheduledThreadPoolExecutor.",java,Remember,1,6
What is the difference between String pool and heap memory?,String pool is a special memory area in heap where string literals are stored to optimize memory usage through string interning. Regular string objects created with 'new' are stored in heap memory outside the string pool.,java,Analyze,4,6
What is the difference between shallow copy and deep copy?,Shallow copy creates a new object but references to nested objects are shared. Deep copy creates a new object with copies of all nested objects. Shallow copy is faster but changes to nested objects affect both copies.,java,Analyze,4,5
What is the clone() method in Java?,"The clone() method creates a copy of an object. Classes must implement Cloneable interface to use it. By default, it performs shallow copying. For deep copying, the clone() method must be overridden to handle nested objects.",java,Remember,1,4
What is the difference between ArrayList and Vector?,"ArrayList is not synchronized and allows multiple threads to access simultaneously, making it faster. Vector is synchronized and thread-safe but slower. ArrayList grows by 50% when capacity is exceeded, Vector doubles its size.",java,Analyze,4,4
What is the difference between HashMap and Hashtable?,"HashMap allows null keys and values, is not synchronized, and is faster. Hashtable doesn't allow null keys/values, is synchronized and thread-safe, but slower. HashMap was introduced in Java 1.2, Hashtable in Java 1.0.",java,Analyze,4,4
What is the Iterator interface?,Iterator provides a way to access elements of a collection sequentially without exposing its internal structure. It has hasNext() and next() methods for traversal and remove() for safe element removal during iteration.,java,Remember,1,3
What is the difference between Iterator and ListIterator?,"Iterator can traverse forward only and works with all collections. ListIterator can traverse both forward and backward, allows modification during iteration, and works only with List implementations.",java,Analyze,4,4
What is the difference between fail-fast and fail-safe iterators?,Fail-fast iterators throw ConcurrentModificationException when the collection is modified during iteration. Fail-safe iterators work on a copy of the collection and don't throw exceptions but may not reflect real-time changes.,java,Analyze,4,6
What is generics in Java?,"Generics provide type safety by allowing classes, interfaces, and methods to operate on parameterized types. They enable compile-time type checking, eliminate casting, and make code more readable and maintainable.",java,Remember,1,5
What is type erasure in Java generics?,"Type erasure is the process where generic type information is removed during compilation. Generic types are replaced with their bounds or Object, maintaining backward compatibility but losing runtime type information.",java,Remember,1,7
What are bounded type parameters?,"Bounded type parameters restrict the types that can be used as type arguments. Upper bounds use 'extends' keyword (T extends Number), lower bounds use 'super' keyword (T super Integer), providing more control over generic types.",java,Remember,1,6
What is wildcards in Java generics?,"Wildcards (?) represent unknown types in generics. Unbounded wildcards (?), upper bounded (? extends Type), and lower bounded (? super Type) wildcards provide flexibility when working with generic types.",java,Remember,1,6
What is annotation in Java?,"Annotations are metadata that provide information about the code without affecting its behavior. They can be processed at compile-time or runtime. Common examples include @Override, @Deprecated, and @SuppressWarnings.",java,Remember,1,4
What is the difference between @Override and overriding?,@Override is an annotation that indicates a method is intended to override a parent method. It provides compile-time checking to ensure the method signature matches the parent. Overriding is the actual process of redefining a method.,java,Analyze,4,3
What is the enum in Java?,"Enum is a special class that represents a group of constants. It's type-safe, can have methods and constructors, and implements Comparable and Serializable interfaces. Enums are implicitly final and their constructors are private.",java,Remember,1,4
What is the difference between ordinary class and enum?,"Enums are implicitly final and extend java.lang.Enum, cannot be extended, have private constructors, and represent fixed constants. Ordinary classes can be extended, have public constructors, and represent general objects.",java,Analyze,4,4
What is the difference between composition and inheritance?,"Inheritance represents 'is-a' relationship using extends keyword, sharing code through parent classes. Composition represents 'has-a' relationship, where objects contain other objects as members, providing more flexibility and loose coupling.",java,Analyze,4,5
What is aggregate and composition in Java?,Aggregation is a 'has-a' relationship where objects can exist independently (Department has Students). Composition is a stronger 'part-of' relationship where parts cannot exist without the whole (House has Rooms).,java,Remember,1,5
What is coupling and cohesion in Java?,Coupling measures how closely connected different modules are (loose coupling is better). Cohesion measures how closely related elements within a module are (high cohesion is better). Good design has loose coupling and high cohesion.,java,Remember,1,6
What is the singleton pattern in Java?,"Singleton pattern ensures only one instance of a class exists. It provides global access point and controls instantiation. Common implementations include eager initialization, lazy initialization, and thread-safe versions using synchronization.",java,Remember,1,5
What is the factory pattern in Java?,Factory pattern provides an interface for creating objects without specifying their exact classes. It encapsulates object creation logic and promotes loose coupling by eliminating the need to bind application-specific classes.,java,Remember,1,5
What is JDBC in Java?,"JDBC (Java Database Connectivity) is an API for connecting and executing queries with databases. It provides a standard interface for database operations including connection management, statement execution, and result processing.",java,Remember,1,4
What is the difference between Statement and PreparedStatement?,"Statement is used for simple SQL queries and is compiled each time. PreparedStatement is pre-compiled, supports parameterized queries, prevents SQL injection, and offers better performance for repeated executions.",java,Analyze,4,5
What is connection pooling in JDBC?,"Connection pooling is a technique that maintains a pool of database connections to improve performance. Instead of creating new connections for each request, applications reuse existing connections from the pool, reducing overhead.",java,Remember,1,5
What is the difference between forward() and sendRedirect()?,"forward() transfers control to another resource on the server side, maintaining the same request. sendRedirect() sends a response to the client to make a new request to a different URL, creating a new request-response cycle.",java,Analyze,4,4
What is the difference between GET and POST methods?,"GET sends data in URL parameters, has size limitations, is idempotent, and is used for retrieving data. POST sends data in request body, has no size limit, is not idempotent, and is used for sending data to be processed.",java,Analyze,4,3
What is the difference between heap and stack memory?,"Heap stores objects and instance variables, is shared among threads, and has slower access. Stack stores method calls and local variables, is thread-specific, has faster access, and follows LIFO principle.",java,Analyze,4,6
What is memory leak in Java?,"Memory leak occurs when objects are not properly garbage collected due to unintended references. Common causes include static collections, listener registrations, and unclosed resources. It leads to OutOfMemoryError.",java,Remember,1,7
What is the difference between StringBuilder and StringBuffer?,StringBuilder is not thread-safe and faster for single-threaded operations. StringBuffer is thread-safe using synchronization but slower. Both are mutable and more efficient than String for multiple concatenations.,java,Analyze,4,4
What is the difference between primitive and reference types?,"Primitive types store values directly in memory (int, boolean, char). Reference types store memory addresses pointing to objects (String, arrays, objects). Primitives are faster and stored in stack, references in heap.",java,Analyze,4,4
What is the difference between instance and local variables?,"Instance variables belong to objects, are initialized to default values, and exist until the object is garbage collected. Local variables belong to methods, must be initialized before use, and exist only during method execution.",java,Analyze,4,3
What is the default value of different data types in Java?,"Default values are: byte/short/int (0), long (0L), float (0.0f), double (0.0d), boolean (false), char ('\u0000'), and reference types (null). These apply to instance variables and array elements.",java,Remember,1,2
What is method signature in Java?,"Method signature consists of the method name and parameter list (types and order). It doesn't include return type, access modifiers, or throws clause. Method signatures must be unique within a class for overloading.",java,Remember,1,3
What is the difference between continue and break statements?,break terminates the current loop completely and transfers control to the statement after the loop. continue skips the current iteration and moves to the next iteration of the loop.,java,Analyze,4,2
What is the switch statement in Java?,"Switch statement provides multi-way branching based on the value of an expression. It supports byte, short, int, char, String, and enum types. Each case must end with break to prevent fall-through.",java,Remember,1,3
What is the difference between while and do-while loops?,"while loop checks condition before execution and may not execute at all. do-while loop executes the body first, then checks condition, guaranteeing at least one execution.",java,Analyze,4,2
What is the enhanced for loop (for-each) in Java?,"Enhanced for loop simplifies iteration over arrays and collections. Syntax: for(Type element : collection). It's read-only, more readable, and eliminates index-related errors but doesn't provide access to the index.",java,Remember,1,3
What is the difference between Array and ArrayList?,"Arrays have fixed size, can store primitives and objects, and provide direct memory access. ArrayList has dynamic size, stores only objects (using autoboxing for primitives), and provides additional methods like add(), remove().",java,Analyze,4,4
What is multidimensional array in Java?,Multidimensional arrays are arrays of arrays. Common types include 2D arrays (int[][]) representing matrices. They can be jagged (irregular) or rectangular. Declaration: int[][] arr = new int[rows][columns].,java,Remember,1,4
What is the difference between length and length() in Java?,"length is a property of arrays that returns the number of elements. length() is a method of String class that returns the number of characters. Arrays use property, Strings use method.",java,Analyze,4,2
"What is the difference between public, protected, default, and private access modifiers?",public: accessible everywhere. protected: accessible within package and subclasses. default (package-private): accessible within package only. private: accessible within same class only. They control visibility and encapsulation.,java,Analyze,4,3
What is the super keyword in Java?,"super keyword refers to the parent class. It's used to access parent class methods, constructors, and variables. super() calls parent constructor and must be the first statement in child constructor.",java,Remember,1,3
What is the this keyword in Java?,"this keyword refers to the current object instance. It's used to access instance variables, call other constructors in the same class, and pass current object as parameter. this() calls another constructor.",java,Remember,1,2
What is method chaining in Java?,"Method chaining is a technique where methods return the current object (this), allowing multiple method calls to be linked together. It creates fluent interfaces and makes code more readable and concise.",java,Remember,1,4
What is the difference between instance method and static method?,"Instance methods belong to objects, can access instance variables and other instance methods. Static methods belong to the class, cannot access instance variables directly, and can be called without creating objects.",java,Analyze,4,3
What is method hiding in Java?,"Method hiding occurs when a subclass defines a static method with the same signature as a static method in the parent class. Unlike overriding, the method called depends on the reference type, not the object type.",java,Remember,1,5
What is covariant return type in Java?,Covariant return type allows overriding methods to return a subtype of the return type declared in the parent method. This feature was introduced in Java 5 and maintains type safety while providing flexibility.,java,Remember,1,6
What is the difference between method overloading and method overriding?,"Method overloading: same method name, different parameters, compile-time polymorphism, same class. Method overriding: same signature, different implementation, runtime polymorphism, inheritance required.",java,Analyze,4,4
What is the difference between early binding and late binding?,"Early binding (static binding) resolves method calls at compile time, used for static, private, and final methods. Late binding (dynamic binding) resolves method calls at runtime, used for virtual methods and enables polymorphism.",java,Analyze,4,7
What is the difference between constructor and method?,"Constructor has same name as class, no return type, called automatically when object is created. Method has any name, has return type, called explicitly. Constructor initializes objects, methods perform operations.",java,Analyze,4,3
What is constructor chaining in Java?,"Constructor chaining is calling one constructor from another constructor using this() or super(). this() calls another constructor in the same class, super() calls parent constructor. The call must be the first statement.",java,Remember,1,4
What is the difference between default constructor and parameterized constructor?,"Default constructor takes no parameters and provides default initialization. Parameterized constructor takes parameters and allows custom initialization. If no constructor is defined, Java provides a default constructor.",java,Analyze,4,3
What is the difference between static block and instance block?,"Static block executes once when class is loaded, used for static initialization. Instance block executes before every constructor call, used for instance initialization. Static blocks execute before instance blocks.",java,Analyze,4,5
What is the order of execution in Java?,"Execution order: 1) Static blocks and variables (when class loads), 2) Instance blocks and variables (when object created), 3) Constructor. Within same type, execution follows declaration order.",java,Remember,1,5
What is the difference between instance variable and class variable?,"Instance variables are unique to each object, stored in heap memory. Class variables (static) are shared among all objects, stored in method area. Instance variables are created with objects, class variables when class loads.",java,Analyze,4,4
What is the difference between pass by value and pass by reference?,"Java is always pass by value. For primitives, the value is copied. For objects, the reference value (memory address) is copied, not the object itself. Modifications to object state affect the original, but reassigning the reference doesn't.",java,Analyze,4,6
What is the difference between JIT compiler and interpreter?,"Interpreter executes bytecode line by line, slower but immediate execution. JIT compiler compiles frequently used bytecode to native machine code for faster execution. JVM uses both: interpreter for initial execution, JIT for optimization.",java,Analyze,4,8
What is the difference between String literal and String object?,"String literals are stored in string pool and reused for same values. String objects created with 'new' are stored in heap memory. Literals enable memory optimization through interning, objects guarantee unique instances.",java,Analyze,4,5
What is immutable class in Java?,"Immutable class objects cannot be modified after creation. Requirements: final class, private final fields, no setters, defensive copying for mutable fields. Examples: String, Integer, LocalDate. Benefits: thread safety, caching, security.",java,Remember,1,5
What is marker interface in Java?,"Marker interface has no methods and marks classes for specific treatment. Examples: Serializable, Cloneable, Remote. They provide metadata to JVM or frameworks about class capabilities without enforcing method implementation.",java,Remember,1,4
"What is the difference between JVM, JRE, and JDK?","JVM executes Java bytecode and provides runtime environment. JRE includes JVM plus libraries needed to run Java applications. JDK includes JRE plus development tools (compiler, debugger) needed to develop Java applications.",java,Analyze,4,3
What is the Java Memory Model and how does it support multithreaded applications?,"The Java Memory Model (JMM) defines how threads interact through memory and what behaviors are allowed in concurrent execution. It specifies rules for visibility, ordering, and atomicity of shared variables. The JMM ensures that changes made by one thread are visible to other threads through proper synchronization mechanisms like volatile, synchronized blocks, and explicit locks.",java,Remember,1,9
How do you create a thread-safe singleton class in Java?,"A thread-safe singleton can be created using: 1) Synchronized method approach, 2) Double-checked locking with volatile keyword, 3) Enum-based singleton (recommended), 4) Initialization-on-demand holder idiom, or 5) Using concurrent utilities like AtomicReference. The enum approach is preferred as it handles serialization and thread-safety automatically.",java,Remember,1,7
What is the difference between ConcurrentHashMap and HashMap in multithreaded environments?,HashMap is not thread-safe and can cause infinite loops or data corruption in multithreaded environments. ConcurrentHashMap uses segment-based locking (Java 7) or CAS operations with synchronized blocks (Java 8+) to provide thread-safe operations with better performance than synchronized HashMap. It allows concurrent reads and limited concurrent writes.,java,Analyze,4,7
Explain the concept of CompletableFuture and its use cases.,"CompletableFuture is a powerful asynchronous programming tool introduced in Java 8. It represents a future result of an asynchronous computation and provides methods for combining, chaining, and handling multiple asynchronous operations. Use cases include non-blocking I/O operations, parallel processing, and building reactive applications with better resource utilization.",java,Understand,2,8
What is the difference between CountDownLatch and CyclicBarrier?,"CountDownLatch is a one-time synchronization aid where threads wait for a count to reach zero. It cannot be reused. CyclicBarrier allows a set of threads to wait for each other to reach a common barrier point and can be reused. CountDownLatch is used for 'wait for N operations to complete', while CyclicBarrier is for 'wait for N threads to be ready'.",java,Analyze,4,7
How do you handle memory leaks in Java applications?,"Memory leaks occur when objects are unintentionally retained in memory. Prevention strategies include: 1) Properly closing resources using try-with-resources, 2) Removing listeners and callbacks, 3) Clearing static collections, 4) Using weak references for caches, 5) Profiling with tools like JVisualVM or Eclipse MAT, and 6) Implementing proper object lifecycle management.",java,Apply,3,8
What is the difference between Optional and null in Java?,"Optional is a container class introduced in Java 8 that represents the presence or absence of a value without using null. It provides methods like isPresent(), ifPresent(), map(), and orElse() to handle absent values gracefully. Optional helps prevent NullPointerException and makes code more expressive and safer than traditional null checks.",java,Analyze,4,5
Explain the concept of method references in Java 8.,"Method references provide a shorthand syntax for lambda expressions that call a single method. Types include: 1) Static method references (Class::staticMethod), 2) Instance method references (object::instanceMethod), 3) Constructor references (Class::new), and 4) Arbitrary object method references (Class::instanceMethod). They improve code readability and reusability.",java,Understand,2,4
What is the difference between fail-fast and fail-safe iterators with examples?,"Fail-fast iterators (ArrayList, HashMap) throw ConcurrentModificationException when the collection is modified during iteration. They work on the original collection. Fail-safe iterators (ConcurrentHashMap, CopyOnWriteArrayList) work on a copy of the collection and don't throw exceptions but may not reflect recent changes. Example: ArrayList iterator vs ConcurrentHashMap iterator.",java,Analyze,4,6
How do you implement a custom exception in Java?,"Custom exceptions are created by extending Exception (checked) or RuntimeException (unchecked). Best practices include: 1) Providing meaningful names, 2) Including multiple constructors, 3) Adding custom fields for additional context, 4) Implementing proper serialization, and 5) Following the exception hierarchy appropriately based on whether it should be checked or unchecked.",java,Create,6,5
What is React?,"React is an efficient, flexible, and open-source JavaScript library that allows developers to create simple, fast, and scalable web applications. It was created by Jordan Walke, a software engineer working for Facebook, and is used to build reusable components for the view layer in the MVC architecture.",react,Remember,1,2
What are the main features of React?,"React's main features include: Virtual DOM for efficient updates and rendering, Component-Based Architecture for reusable and modular code, JSX syntax extension for describing UI, One-way data binding for predictable data flow, and High performance through selective component updates rather than full re-renders.",react,Remember,1,2
What is JSX?,"JSX is a syntax extension of JavaScript used with React to describe the user interface's appearance. Using JSX, developers can write HTML structures in the same file that contains JavaScript code, making it easier to create and visualize UI components.",react,Remember,1,3
Can web browsers read JSX directly?,"No, web browsers cannot read JSX directly. JSX needs to be transpiled into regular JavaScript before browsers can understand it. This is typically done using tools like Babel during the build process.",react,Remember,1,3
What is the Virtual DOM?,"The Virtual DOM is a lightweight representation of the real DOM kept in memory. When an object's state changes, the virtual DOM changes only that object in the real DOM rather than updating all objects, resulting in better performance through efficient diffing and selective updates.",react,Remember,1,5
What are components in React?,"Components are the building blocks of any React application. A single app usually consists of multiple components that split the user interface into independent, reusable parts that can be processed separately, promoting modularity and maintainability.",react,Remember,1,2
What are the types of components in React?,React has two main types of components: Functional Components (simple JavaScript functions that return JSX) and Class Components (ES6 classes that extend React.Component and have additional features like state and lifecycle methods).,react,Remember,1,3
What are props in React?,Props (properties) are read-only inputs passed to components that allow data to be passed from parent to child components. They help make components reusable and dynamic by providing external data and configuration.,react,Remember,1,2
What is the difference between state and props?,State is internal data managed by the component that can change over time and triggers re-renders when modified. Props are external data passed to the component from its parent that is read-only and cannot be modified by the receiving component.,react,Analyze,4,4
What are Pure Components?,"Pure Components are components that only re-render when their props or state actually change, providing performance optimization by preventing unnecessary re-renders. They implement a shallow comparison of props and state to determine if re-rendering is needed.",react,Remember,1,5
What is state in React?,"State is an object that holds data that can change over the lifetime of a component. When state changes, the component re-renders to reflect the new data, making the UI reactive to data changes.",react,Remember,1,3
What is the useState Hook?,"useState is a React Hook that allows functional components to manage state. It returns an array with the current state value and a function to update it, enabling state management in functional components without converting to class components.",react,Remember,1,4
What is lifting state up?,Lifting state up is a technique that allows state sharing among multiple components by moving the state from individual components to their parent and passing it down to the components. This helps synchronize data across components and establishes a single source of truth.,react,Remember,1,5
What are controlled components?,"Controlled components are form elements whose values are controlled by React state. The component manages the form data through React's state mechanism, making React the single source of truth for form data and enabling predictable form behavior.",react,Remember,1,4
What are uncontrolled components?,"Uncontrolled components are form elements that maintain their own internal state and are not controlled by React state. They use refs to access form values directly from the DOM, similar to traditional HTML form handling.",react,Remember,1,4
What are React Hooks?,"React Hooks are functions that allow functional components to use state and other React features without writing a class. They enable functional components to manage state, side effects, and lifecycle events, making functional programming more powerful in React.",react,Remember,1,5
What are the different types of Hooks?,"There are two broad types of hooks: Built-in hooks (including basic hooks like useState, useContext, useEffect, and additional hooks like useMemo, useRef, useCallback) and Custom hooks (JavaScript functions that work similarly to regular functions but can use other hooks).",react,Remember,1,4
When should you use useMemo()?,"useMemo() should be used to perform expensive calculations and for referential equality, including passing complex objects as props to child components. It memoizes the result of a calculation and only recalculates when dependencies change, improving performance.",react,Evaluate,5,7
What is the useEffect Hook?,"useEffect is a Hook that allows you to perform side effects in functional components, such as data fetching, subscriptions, or manually changing the DOM. It combines the functionality of componentDidMount, componentDidUpdate, and componentWillUnmount lifecycle methods.",react,Remember,1,5
What is the useContext Hook?,useContext is a Hook that allows you to consume React Context values without needing to wrap components in Consumer components. It provides a cleaner way to access context values in functional components.,react,Remember,1,5
What are synthetic events in React?,"Synthetic events are React's wrapper around native DOM events that provide a consistent API across different browsers. They have the same interface as native events but work consistently across all browsers, handling cross-browser compatibility automatically.",react,Remember,1,6
How is event handling different in React?,"React uses synthetic events and event delegation. Event handlers are passed as props to JSX elements, and React handles the binding and cross-browser compatibility automatically. Events are attached to the document root and managed centrally.",react,Understand,2,5
How do you handle forms in React?,"Forms in React are typically handled using controlled components where form data is managed by React state. You create state for form values, bind input values to state, and handle changes with event handlers to maintain synchronization between form inputs and component state.",react,Apply,3,4
What are Higher-Order Components (HOCs)?,"Higher-Order Components are functions that take a component and return a new component with additional props or functionality. They're used for code reuse and cross-cutting concerns like authentication, logging, or data fetching.",react,Remember,1,7
What are React Fragments?,"React Fragments allow you to group multiple elements without adding extra nodes to the DOM. They provide a way to return multiple elements from a component without a wrapper div, keeping the DOM structure clean.",react,Remember,1,3
What is React reconciliation?,Reconciliation is the process by which React updates the DOM by comparing the new virtual DOM tree with the previous virtual DOM tree and making only the necessary changes. This diffing algorithm ensures efficient updates and optimal performance.,react,Remember,1,7
What is React Fiber?,"React Fiber is a reimplementation of React's core algorithm that enables features like incremental rendering, better error handling, and priority-based updates. It allows React to pause, abort, or reuse work as new updates come in.",react,Remember,1,9
What are portals in React?,"Portals provide a way to render children into a DOM node that exists outside the DOM hierarchy of the parent component. They're useful for modals, tooltips, and dropdowns that need to break out of their parent container's styling constraints.",react,Remember,1,6
How do you optimize React performance?,"React performance can be optimized by using React.memo for functional components, implementing useMemo and useCallback for expensive calculations, using proper key props in lists, avoiding unnecessary re-renders, and implementing code splitting with React.lazy.",react,Remember,1,6
What is the purpose of keys in React lists?,"Keys help React identify which items have changed, been added, or removed in lists. They should be stable, predictable, and unique among siblings to optimize rendering performance and maintain component state correctly during list updates.",react,Remember,1,4
What is the Shallow Renderer in React testing?,Shallow rendering is a testing utility that renders a component 'one level deep' without rendering child components. It's useful for isolated unit testing where you want to test a component without worrying about the behavior of child components.,react,Remember,1,6
What is Jest?,"Jest is a JavaScript testing framework commonly used with React applications. It provides features like snapshot testing, mocking, code coverage reporting, and a comprehensive assertion library for testing React components and JavaScript functions.",react,Remember,1,3
What is Redux?,"Redux is a state management library for JavaScript applications that centralizes application state in a store. Components access and update state through actions and reducers, providing predictable state management and time-travel debugging capabilities.",react,Remember,1,5
What are the components of Redux?,"Redux has three main components: Store (holds the application state), Actions (describe what to do and carry payload data), and Reducers (define how the state changes in response to actions by returning a new state).",react,Remember,1,5
What is the difference between Context API and Redux?,"Context API is simpler and suitable for less complex applications with built-in React functionality, while Redux is more robust with middleware support, dev tools, and global store, making it better for complex, scalable state management with time-travel debugging.",react,Analyze,4,6
What is React Router?,"React Router is a library for handling client-side routing in React applications. It enables navigation between different views or components without full page reloads, providing a single-page application experience with URL-based navigation.",react,Remember,1,4
How do you implement programmatic navigation?,Programmatic navigation can be implemented using the useNavigate hook (React Router v6) or history.push method (React Router v5). These allow you to navigate to different routes programmatically in response to user actions or application logic.,react,Create,6,5
What are common folder structures for React?,"Common structures include feature-based organization (grouping by features/modules), file-type organization (separating by components, hooks, utils), and domain-driven organization (organizing by business domains). The choice depends on project size and team preferences.",react,Remember,1,3
Why should component names start with a capital letter?,Component names must start with a capital letter because React treats components starting with lowercase letters as DOM tags. This is a JSX requirement that helps React distinguish between custom components and native HTML elements.,react,Remember,1,2
What are the advantages of React?,"React offers reusable components for modularity, Virtual DOM for better performance, strong community and ecosystem support, unidirectional data flow for predictability, easy learning curve, server-side rendering support, and excellent developer tools for debugging and development.",react,Remember,1,2
What is the difference between React.Component and React.PureComponent?,"React.Component is the base class for class components that re-renders on every state or props change. React.PureComponent automatically implements shouldComponentUpdate with a shallow prop and state comparison, preventing unnecessary re-renders when data hasn't actually changed.",react,Analyze,4,6
What is the useReducer hook and when would you use it?,"useReducer is a React Hook that provides an alternative to useState for managing complex state logic. It's preferred when you have complex state transitions, multiple sub-values, or when the next state depends on the previous one. It accepts a reducer function and initial state, returning current state and dispatch function.",react,Evaluate,5,7
What is React.StrictMode and why is it useful?,"React.StrictMode is a wrapper component that helps identify potential problems in an application by running additional checks and warnings in development mode. It helps detect unsafe lifecycles, deprecated API usage, and side effects in render methods without affecting the production build.",react,Analyze,4,5
What are React Error Boundaries?,"Error Boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of crashing the entire application. They're implemented using componentDidCatch or getDerivedStateFromError lifecycle methods.",react,Remember,1,7
What is the difference between componentDidMount and useEffect?,"componentDidMount is a class component lifecycle method that runs once after the component mounts. useEffect is a Hook that can replicate componentDidMount behavior when used with an empty dependency array, but it's more versatile as it can handle multiple lifecycle events and dependencies.",react,Analyze,4,5
What is React.memo and how does it work?,"React.memo is a higher-order component that memoizes the rendered output of a functional component. It only re-renders if its props have changed, using shallow comparison by default. You can provide a custom comparison function as the second argument for more control.",react,Analyze,4,6
What is the useCallback hook and when should you use it?,useCallback is a React Hook that returns a memoized version of a callback function that only changes if one of its dependencies has changed. It's useful for preventing unnecessary re-renders of child components that rely on referential equality checks.,react,Evaluate,5,7
What is Server-Side Rendering (SSR) in React?,"Server-Side Rendering is the process of rendering React components on the server and sending the fully rendered HTML to the client. This improves initial page load performance, SEO, and provides better user experience, especially on slower devices or networks.",react,Remember,1,8
What is Static Site Generation (SSG) in React?,"Static Site Generation is a method where React pages are pre-rendered at build time, generating static HTML files. This provides excellent performance, SEO benefits, and can be served from CDNs. It's ideal for content that doesn't change frequently.",react,Remember,1,7
What is the difference between SSR and SSG?,"SSR (Server-Side Rendering) renders pages on-demand at request time on the server, while SSG (Static Site Generation) pre-renders pages at build time. SSR is better for dynamic content and personalization, while SSG is better for performance and content that changes infrequently.",react,Analyze,4,8
What is hydration in React?,"Hydration is the process of attaching event listeners and making a server-rendered React application interactive on the client side. It connects the static HTML with the React component tree, enabling client-side functionality without re-rendering the entire page.",react,Remember,1,8
What is the useRef hook and its use cases?,"useRef is a React Hook that returns a mutable ref object whose .current property persists across re-renders. It's used for accessing DOM elements directly, storing mutable values that don't trigger re-renders, and maintaining references to previous values.",react,Remember,1,4
What is the difference between useRef and useState?,"useRef returns a mutable object that persists across renders without triggering re-renders when changed. useState returns state and a setter function that triggers re-renders when the state changes. useRef is for mutable values, useState is for reactive state.",react,Analyze,4,5
What is prop drilling and how can you avoid it?,"Prop drilling is passing props through multiple component layers to reach a deeply nested component. It can be avoided using React Context API, state management libraries like Redux, or component composition patterns to reduce unnecessary prop passing.",react,Remember,1,5
What is the Context API and how do you use it?,"The Context API provides a way to share values between components without explicitly passing props through every level of the tree. It consists of createContext, Provider component to supply values, and useContext hook or Consumer component to consume values.",react,Apply,3,5
What are React lifecycle methods?,"React lifecycle methods are special methods in class components that are called at different stages of a component's existence: mounting (componentDidMount), updating (componentDidUpdate), and unmounting (componentWillUnmount). They allow you to hook into these phases to perform side effects.",react,Remember,1,5
What is componentDidUpdate and its use cases?,"componentDidUpdate is a lifecycle method that runs after a component updates due to changes in props or state. It's used for DOM operations after updates, network requests based on prop changes, or updating state based on prop changes with proper comparison to avoid infinite loops.",react,Remember,1,6
What is componentWillUnmount and its use cases?,"componentWillUnmount is a lifecycle method called just before a component is destroyed and unmounted from the DOM. It's used for cleanup activities like canceling network requests, removing event listeners, clearing timers, or unsubscribing from subscriptions to prevent memory leaks.",react,Remember,1,5
What is the useLayoutEffect hook?,"useLayoutEffect is a React Hook that fires synchronously after all DOM mutations but before the browser paints. It's used for DOM measurements, synchronous DOM updates, or when you need to read layout information before the browser paints the screen.",react,Remember,1,7
What is the difference between useEffect and useLayoutEffect?,"useEffect runs asynchronously after the render is committed to the screen, while useLayoutEffect runs synchronously after all DOM mutations but before the browser paints. useLayoutEffect is useful for DOM measurements and preventing visual flickering.",react,Analyze,4,7
What is code splitting in React?,"Code splitting is a technique to split your code into smaller chunks that can be loaded on demand. React supports code splitting through dynamic imports and React.lazy for components, reducing initial bundle size and improving application performance.",react,Remember,1,6
What is React.lazy and how does it work?,"React.lazy is a function that enables dynamic importing of components, allowing you to render them as regular components but load them only when needed. It must be used with Suspense component to handle the loading state while the component is being fetched.",react,Analyze,4,6
What is React Suspense?,React Suspense is a component that allows you to handle loading states declaratively when components are being lazy-loaded or when data is being fetched. It displays a fallback UI while waiting for the suspended component or data to be ready.,react,Remember,1,7
What is the difference between React.createElement and JSX?,"JSX is a syntax extension that gets transpiled to React.createElement calls. JSX provides a more readable and HTML-like syntax, while React.createElement is the underlying function that creates React elements with type, props, and children arguments.",react,Analyze,4,4
What are React Developer Tools?,"React Developer Tools are browser extensions that provide debugging capabilities for React applications. They allow you to inspect the React component tree, view props and state, profile performance, and debug hooks in development mode.",react,Remember,1,3
What is the React Profiler?,The React Profiler is a tool that measures the performance of React applications by tracking how often components render and the cost of rendering. It helps identify performance bottlenecks and optimize component rendering behavior.,react,Remember,1,6
What is React.forwardRef?,React.forwardRef is a function that allows a component to receive a ref and forward it to a child component. It's useful for accessing DOM elements in child components or when creating reusable component libraries that need ref access.,react,Remember,1,7
What is the useImperativeHandle hook?,useImperativeHandle is a React Hook that customizes the instance value that is exposed to parent components when using ref. It allows you to control what methods or properties are accessible from the parent component through the ref.,react,Remember,1,8
What is React.cloneElement?,React.cloneElement is a function that clones a React element and returns a new element with additional or modified props. It's useful for modifying children components or adding props to elements that are passed as children.,react,Remember,1,6
What is the difference between React.Children.map and regular array map?,"React.Children.map is a utility that safely iterates over children props even if they're not an array, handling single children, null, or undefined. Regular array map only works on arrays and would throw errors on non-array children.",react,Analyze,4,6
What is defaultProps in React?,"defaultProps is a property that allows you to define default values for props in React components. If a prop is not provided by the parent component, the default value from defaultProps will be used instead.",react,Remember,1,3
What is propTypes in React?,"propTypes is a type-checking feature that validates the props passed to a component. It helps catch bugs during development by ensuring props have the correct type and structure, providing warnings when prop types don't match expectations.",react,Remember,1,4
What is React.Fragment shorthand syntax?,React.Fragment can be written using the shorthand syntax <></> which allows you to group multiple elements without adding extra DOM nodes. This empty tag syntax is cleaner and more concise than writing React.Fragment explicitly.,react,Remember,1,2
What is the difference between controlled and uncontrolled inputs?,"Controlled inputs have their values controlled by React state, making React the single source of truth. Uncontrolled inputs maintain their own internal state and are accessed via refs. Controlled inputs provide better control and validation capabilities.",react,Analyze,4,4
What is React.createRef?,"React.createRef is a function that creates a ref object for class components. It provides a way to access DOM elements or component instances directly. In functional components, useRef is preferred over createRef.",react,Remember,1,4
What is the difference between React development and production builds?,"Development builds include helpful warnings, error messages, and development tools for debugging. Production builds are optimized, minified, and stripped of development warnings for better performance and smaller bundle sizes.",react,Analyze,4,3
What is React Hot Reload?,"React Hot Reload is a development feature that allows you to see changes in your React components immediately without losing the current state. It updates components in real-time as you edit the code, improving development productivity.",react,Remember,1,4
What is the purpose of displayName in React components?,"displayName is a string property used by React DevTools to identify components in the component tree. It's especially useful for higher-order components, anonymous functions, or when you want to customize how components appear in debugging tools.",react,Remember,1,3
What is React.isValidElement?,"React.isValidElement is a utility function that checks whether a given value is a valid React element. It returns true if the value is a React element created by React.createElement, JSX, or React.cloneElement.",react,Remember,1,4
What is the difference between React.Component and function components?,"React.Component is a class-based approach with lifecycle methods and built-in state management. Function components are simpler, use hooks for state and effects, have better performance, and are the preferred modern approach for React development.",react,Analyze,4,4
What is React.StrictMode's double rendering?,"React.StrictMode intentionally double-invokes functions like constructors, render methods, and state updaters in development mode to help detect side effects. This helps identify components that don't behave consistently and promotes pure function practices.",react,Remember,1,6
What is the difference between shallow and deep comparison in React?,"Shallow comparison checks if primitive values are equal and if objects/arrays have the same reference. Deep comparison recursively checks all nested properties. React uses shallow comparison by default for performance, but deep comparison is more thorough but expensive.",react,Analyze,4,6
What is React Concurrent Mode?,"React Concurrent Mode is a set of features that help React apps stay responsive by making rendering interruptible. It allows React to pause work and prioritize more urgent updates, improving user experience for complex applications.",react,Remember,1,9
What is the useDebugValue hook?,"useDebugValue is a React Hook that allows you to display a label for custom hooks in React DevTools. It helps with debugging by providing meaningful names and values for custom hooks, making development and debugging easier.",react,Remember,1,5
What is React.startTransition?,"React.startTransition is a function that marks updates as non-urgent, allowing React to prioritize other updates. It's used to improve perceived performance by keeping the UI responsive during expensive operations or state updates.",react,Remember,1,8
What is the useDeferredValue hook?,useDeferredValue is a React Hook that defers updating a value until more urgent updates have finished. It's useful for optimizing expensive renders by allowing React to prioritize user interactions over heavy computational updates.,react,Remember,1,8
What is React.useSyncExternalStore?,useSyncExternalStore is a React Hook that allows you to subscribe to external stores like state management libraries. It ensures that the component stays in sync with external data sources and handles concurrent rendering safely.,react,Remember,1,9
What is the difference between React.render and ReactDOM.render?,"React.render is deprecated and was used in older versions. ReactDOM.render is the current method for rendering React elements into the DOM. In React 18+, ReactDOM.createRoot with root.render is the recommended approach for new applications.",react,Analyze,4,5
What is React.createRoot?,React.createRoot is the new root API introduced in React 18 that enables concurrent features. It replaces ReactDOM.render and provides better performance with features like automatic batching and concurrent rendering capabilities.,react,Remember,1,7
What is automatic batching in React?,"Automatic batching is a React 18 feature that groups multiple state updates into a single re-render for better performance. It works for promises, timeouts, and native event handlers, not just React event handlers like in previous versions.",react,Remember,1,7
What is the difference between client-side and server-side rendering?,"Client-side rendering (CSR) renders components in the browser using JavaScript, while server-side rendering (SSR) renders components on the server and sends HTML to the client. SSR provides better SEO and initial load performance, while CSR offers more interactivity.",react,Analyze,4,6
What is React.unstable_batchedUpdates?,"React.unstable_batchedUpdates is a legacy API that manually batches state updates to prevent multiple re-renders. It's mostly unnecessary in React 18+ due to automatic batching, but was used in earlier versions for performance optimization.",react,Remember,1,6
What is the difference between React.Fragment and div wrapper?,"React.Fragment groups elements without adding extra DOM nodes, while div wrapper adds an additional DOM element. Fragment is better for semantic HTML, CSS layouts, and performance as it doesn't affect the DOM structure or styling.",react,Analyze,4,3
What is React.Children.only?,"React.Children.only is a utility that verifies that children prop contains only one child element and returns it. If children contains more than one child or is not a valid element, it throws an error.",react,Remember,1,5
What is React.Children.count?,"React.Children.count is a utility function that returns the number of components in the children prop. It safely counts children even if they're not in an array format, handling null and undefined values correctly.",react,Remember,1,4
What is React.Children.toArray?,"React.Children.toArray is a utility that converts the children prop to a flat array, assigning keys to each child. It's useful when you need to manipulate children as an array, such as sorting or filtering them.",react,Remember,1,5
What is the difference between React.createElement and JSX transpilation?,"JSX is syntactic sugar that gets transpiled to React.createElement calls by tools like Babel. JSX provides a more readable, HTML-like syntax, while React.createElement is the underlying function that actually creates React elements with explicit parameters.",react,Analyze,4,4
What is React.version?,"React.version is a string property that contains the version number of the React library being used. It's useful for debugging, logging, or conditional logic based on React version in development tools or libraries.",react,Remember,1,2
What is the difference between React.render and hydrate?,"React.render creates a new React tree and replaces the target DOM node. hydrate is used for server-side rendered content, attaching event listeners to existing HTML without replacing it. hydrate is more efficient for SSR applications.",react,Analyze,4,8
What is React.unstable_act?,React.unstable_act is a testing utility that ensures all updates triggered by its callback are processed before continuing. It's used in testing to make sure all state updates and effects are completed before making assertions.,react,Remember,1,6
What is the difference between React.render and createPortal?,"React.render mounts a component tree to a DOM node, while createPortal renders children into a different DOM node while maintaining the React tree hierarchy. Portals are useful for modals, tooltips, and overlays that need to escape their parent container.",react,Analyze,4,6
What is React.lazy loading and its benefits?,"React.lazy loading allows components to be loaded dynamically only when needed, reducing initial bundle size. Benefits include faster initial page loads, better performance, reduced bandwidth usage, and improved user experience, especially for large applications.",react,Remember,1,5
What is the difference between React.memo and useMemo?,"React.memo is a higher-order component that memoizes the entire component based on props. useMemo is a hook that memoizes a computed value based on dependencies. React.memo prevents re-renders, while useMemo prevents expensive calculations.",react,Analyze,4,6
What is React.Suspense boundary?,"React.Suspense boundary is a component that catches suspense from lazy-loaded components or data fetching and displays a fallback UI. It creates a boundary where loading states are handled declaratively, improving user experience during async operations.",react,Remember,1,7
What is the difference between React.Component and React.PureComponent performance?,"React.Component always re-renders when parent re-renders, regardless of prop changes. React.PureComponent implements shallow comparison in shouldComponentUpdate, only re-rendering when props or state actually change, providing better performance for components with stable props.",react,Analyze,4,6
What is React.createContext default value?,"React.createContext accepts a default value that's used when a component doesn't have a matching Provider above it in the tree. This default value is only used when there's no Provider, not when Provider has undefined value.",react,Remember,1,4
What is React.useId hook?,"React.useId is a hook that generates unique IDs for accessibility attributes. It ensures that IDs are stable across server and client rendering, preventing hydration mismatches. It's useful for connecting form labels with inputs and other accessibility needs.",react,Remember,1,6
What is React.useInsertionEffect hook?,"React.useInsertionEffect is a hook that fires before DOM mutations, similar to useLayoutEffect but runs earlier. It's primarily intended for CSS-in-JS libraries to inject styles before the browser paints, ensuring proper styling without flickering.",react,Remember,1,8
What is React.useTransition hook?,React.useTransition is a hook that marks state updates as non-urgent transitions. It returns a boolean indicating if a transition is pending and a startTransition function. This helps keep the UI responsive during expensive state updates.,react,Remember,1,8
What is the difference between React.StrictMode and production mode?,"React.StrictMode is development-only and adds extra checks, warnings, and double-invocations to help detect problems. Production mode removes all development warnings and optimizations, resulting in smaller bundle sizes and better performance.",react,Analyze,4,4
What is React.flushSync?,"React.flushSync is a function that forces React to flush updates synchronously, bypassing automatic batching. It should be used sparingly as it can hurt performance, but it's useful when you need DOM updates to be applied immediately.",react,Remember,1,8
What is the difference between React 17 and React 18?,"React 18 introduces concurrent features like automatic batching, Suspense improvements, new hooks (useId, useTransition, useDeferredValue), React.createRoot API, and better server-side rendering support. React 17 was mainly a stepping stone release with minimal new features.",react,Analyze,4,6
What is React.unstable_Profiler?,React.unstable_Profiler is a component that measures the performance of React components. It provides information about render times and can be used programmatically to collect performance metrics in production applications.,react,Remember,1,7
What is React.unstable_DebugTracingMode?,React.unstable_DebugTracingMode is a development tool that provides detailed information about component updates and renders. It helps developers understand why components are re-rendering and track performance issues during development.,react,Remember,1,7
What is React.unstable_LegacyHidden?,"React.unstable_LegacyHidden is a component that can hide its children without unmounting them, preserving their state. It's used internally by React for concurrent features and helps optimize performance by keeping components alive but hidden.",react,Remember,1,9
What is React.unstable_ScopeApi?,"React.unstable_ScopeApi is an experimental API that allows components to collect information about their descendants. It's used for advanced use cases like focus management, accessibility features, and custom component behaviors.",react,Remember,1,9
What is React.unstable_useOpaqueIdentifier?,React.unstable_useOpaqueIdentifier was an experimental hook for generating unique identifiers that work consistently across server and client rendering. It has been replaced by the stable useId hook in React 18.,react,Remember,1,7
What is React.unstable_createMutableSource?,React.unstable_createMutableSource was an experimental API for safely reading from mutable external sources in concurrent mode. It has been replaced by useSyncExternalStore hook in React 18 for better concurrent rendering support.,react,Remember,1,9
What is React.unstable_useMutableSource?,React.unstable_useMutableSource was an experimental hook for subscribing to mutable external sources in a way that's safe with concurrent rendering. It has been superseded by useSyncExternalStore in React 18.,react,Remember,1,9
What is React.unstable_createEventHandle?,"React.unstable_createEventHandle is an experimental API for creating custom event handlers that work with React's event system. It allows for more efficient event handling in specific scenarios, particularly for libraries and advanced use cases.",react,Remember,1,10
What is React.unstable_useEventHandle?,React.unstable_useEventHandle is an experimental hook that works with unstable_createEventHandle to attach custom event handlers to elements. It provides fine-grained control over event handling for performance-critical applications.,react,Remember,1,10
What is React.unstable_runWithPriority?,React.unstable_runWithPriority is an experimental API that allows running callbacks with specific priority levels. It's used internally by React for scheduling updates and can be used for advanced scheduling scenarios.,react,Remember,1,10
What is React.unstable_getCurrentPriority?,React.unstable_getCurrentPriority is an experimental API that returns the current priority level of the React scheduler. It's used for advanced scheduling scenarios and debugging priority-related issues.,react,Remember,1,10
What is React.unstable_next?,React.unstable_next is an experimental API that schedules a callback to run after the current priority level. It's used for advanced scheduling scenarios where you need to defer work to a lower priority.,react,Remember,1,10
What is React.unstable_scheduleCallback?,React.unstable_scheduleCallback is an experimental API that schedules a callback to run at a specific priority level. It's part of React's internal scheduler and can be used for advanced scheduling and performance optimization.,react,Remember,1,10
What is React.unstable_cancelCallback?,React.unstable_cancelCallback is an experimental API that cancels a previously scheduled callback. It works with unstable_scheduleCallback to provide fine-grained control over scheduled work and can help prevent unnecessary computations.,react,Remember,1,10
What is React.unstable_wrapCallback?,"React.unstable_wrapCallback is an experimental API that wraps a callback to preserve the current priority context. It ensures that the callback runs with the same priority as when it was created, maintaining consistent scheduling behavior.",react,Remember,1,10
What is React.unstable_requestPaint?,React.unstable_requestPaint is an experimental API that requests a paint operation from the browser. It's used internally by React for optimizing rendering performance and can be used for advanced rendering scenarios.,react,Remember,1,10
What is React.unstable_continueExecution?,React.unstable_continueExecution is an experimental API that continues paused work in the React scheduler. It's used for advanced scheduling scenarios where you need to manually control the execution flow of scheduled work.,react,Remember,1,10
What is React.unstable_pauseExecution?,"React.unstable_pauseExecution is an experimental API that pauses execution in the React scheduler. It allows for manual control over when work should be paused and resumed, useful for advanced scheduling scenarios.",react,Remember,1,10
What is React.unstable_getFirstCallbackNode?,React.unstable_getFirstCallbackNode is an experimental API that returns the first callback node in the scheduler queue. It's used for advanced scheduling scenarios and debugging scheduled work.,react,Remember,1,10
What is React.unstable_forceFrameRate?,React.unstable_forceFrameRate is an experimental API that forces a specific frame rate for the React scheduler. It's used for testing and debugging performance issues related to frame rates and scheduling.,react,Remember,1,10
What is React.unstable_shouldYield?,React.unstable_shouldYield is an experimental API that indicates whether React should yield control back to the browser. It's used internally by React for cooperative scheduling and can be used for advanced performance optimizations.,react,Remember,1,10
What is React.unstable_requestIdleCallback?,React.unstable_requestIdleCallback is an experimental API that schedules work to run during idle periods. It's used for non-urgent tasks that should only run when the browser is not busy with other work.,react,Remember,1,9
What is React.unstable_cancelIdleCallback?,React.unstable_cancelIdleCallback is an experimental API that cancels a previously scheduled idle callback. It works with unstable_requestIdleCallback to provide control over idle-time work execution.,react,Remember,1,9
What is React.unstable_now?,"React.unstable_now is an experimental API that returns the current time in milliseconds, similar to performance.now(). It's used internally by React's scheduler for timing-related calculations and performance measurements.",react,Remember,1,8
What is React.unstable_IdlePriority?,"React.unstable_IdlePriority is an experimental constant representing the lowest priority level in React's scheduler. Work scheduled with idle priority only runs when there's no other work to do, making it suitable for non-critical tasks.",react,Remember,1,9
What is React.unstable_ImmediatePriority?,"React.unstable_ImmediatePriority is an experimental constant representing the highest priority level in React's scheduler. Work scheduled with immediate priority runs synchronously and blocks other work, reserved for critical updates.",react,Remember,1,9
What is React.unstable_UserBlockingPriority?,"React.unstable_UserBlockingPriority is an experimental constant representing a high priority level for user interactions. It's used for updates that should run quickly to maintain responsive user interfaces, such as input handling.",react,Remember,1,9
What is React.unstable_NormalPriority?,"React.unstable_NormalPriority is an experimental constant representing the default priority level in React's scheduler. Most updates run at normal priority, providing a balance between responsiveness and performance.",react,Remember,1,8
What is React.unstable_LowPriority?,"React.unstable_LowPriority is an experimental constant representing a low priority level in React's scheduler. Work scheduled with low priority runs after higher priority work, suitable for less urgent updates like analytics or logging.",react,Remember,1,8
What is React DevTools Profiler and its features?,"React DevTools Profiler is a performance profiling tool that records component render times, identifies performance bottlenecks, and visualizes component interactions. It provides flame graphs, ranked charts, and detailed timing information for optimization.",react,Remember,1,5
What is React DevTools Components tab functionality?,"React DevTools Components tab allows you to inspect the React component tree, view and edit props and state, search for components, and navigate the component hierarchy. It provides a live view of your application's React structure.",react,Remember,1,4
What is React.createElement signature and parameters?,"React.createElement takes three parameters: type (string for DOM elements or component reference), props (object with properties), and children (remaining arguments). It returns a React element that represents the component or DOM node.",react,Remember,1,3
What is React.cloneElement use cases and examples?,"React.cloneElement is used to modify children components by adding props, changing props, or wrapping functionality. Common use cases include adding event handlers to children, injecting props, or creating higher-order component patterns.",react,Remember,1,6
What is React.isValidElement use cases and validation?,"React.isValidElement is used to validate if a value is a React element before processing it. It's useful in component libraries, conditional rendering, and when working with children props to ensure type safety.",react,Remember,1,4
What is React.Children.forEach and its differences from map?,"React.Children.forEach iterates over children without returning a new array, while React.Children.map returns a new array of elements. forEach is used for side effects, while map is used for transforming children elements.",react,Remember,1,4
What is React component composition vs inheritance?,"React favors composition over inheritance for code reuse. Composition uses props and children to build components, while inheritance extends classes. Composition is more flexible, testable, and aligns with React's component-based architecture.",react,Remember,1,5
What is React render props pattern?,"Render props is a pattern where a component receives a function as a prop that returns React elements. This function is called in the component's render method, allowing for dynamic composition and sharing of component logic.",react,Remember,1,6
What is React compound components pattern?,"Compound components is a pattern where multiple components work together to form a complete UI. They share state and communicate through React context or props, creating a flexible and reusable component system like tabs or accordions.",react,Remember,1,7
What is React provider pattern implementation?,"Provider pattern uses React Context to provide data to components without prop drilling. It involves creating a context, wrapping components with a Provider, and consuming the context in child components using useContext or Consumer.",react,Apply,3,5
What is React custom hooks best practices?,"Custom hooks should start with 'use', return consistent values, handle cleanup, follow single responsibility principle, and be reusable. They should abstract complex logic, manage side effects, and provide clear interfaces for component consumption.",react,Evaluate,5,6
What is React error handling best practices?,"Error handling best practices include using Error Boundaries for catching errors, implementing fallback UIs, logging errors for debugging, using try-catch in async operations, and providing meaningful error messages to users.",react,Evaluate,5,6
What is React testing best practices and strategies?,"Testing best practices include testing user interactions over implementation details, using React Testing Library, writing integration tests, mocking external dependencies, testing error states, and maintaining good test coverage.",react,Evaluate,5,6
What is React performance optimization checklist?,"Performance optimization includes using React.memo, useMemo, useCallback for expensive operations, implementing code splitting, optimizing images, avoiding unnecessary re-renders, using proper keys, and profiling with React DevTools.",react,Remember,1,5
What is React accessibility (a11y) best practices?,"Accessibility best practices include using semantic HTML, providing alt text for images, implementing proper focus management, using ARIA attributes, ensuring keyboard navigation, maintaining color contrast, and testing with screen readers.",react,Evaluate,5,6
What is React security best practices?,"Security best practices include sanitizing user input, avoiding dangerouslySetInnerHTML, implementing proper authentication, using HTTPS, validating props, protecting against XSS attacks, and keeping dependencies updated.",react,Evaluate,5,7
What is React bundle optimization techniques?,"Bundle optimization includes code splitting with React.lazy, tree shaking, minification, compression, analyzing bundle size, removing unused code, lazy loading components, and using CDN for assets.",react,Remember,1,6
What is React TypeScript integration benefits?,"TypeScript integration provides static type checking, better IDE support, improved refactoring, compile-time error detection, better documentation through types, and enhanced development experience with autocompletion and type inference.",react,Remember,1,5
What is React deployment best practices?,"Deployment best practices include building for production, enabling compression, setting up proper caching headers, using CDN, implementing CI/CD pipelines, monitoring performance, setting up error tracking, and ensuring environment-specific configurations.",react,Evaluate,5,6
What is React micro-frontends architecture?,"Micro-frontends architecture breaks down React applications into smaller, independently deployable frontend applications. Each micro-frontend can be developed, tested, and deployed separately, promoting team autonomy and technology diversity.",react,Remember,1,8
What is React state management comparison?,"State management solutions include useState/useReducer for local state, Context API for simple global state, Redux for complex applications, Zustand for lightweight state, and Recoil for atomic state management. Choice depends on complexity and requirements.",react,Remember,1,5
What is React Server Components (RSC)?,"React Server Components are a new feature that allows components to render on the server, reducing bundle size and improving performance. They can access server-only resources and stream content to the client progressively.",react,Remember,1,9
What is React streaming and progressive enhancement?,"React streaming allows sending HTML to the client progressively as it's generated, improving perceived performance. Progressive enhancement ensures the app works without JavaScript and enhances functionality when JavaScript loads.",react,Remember,1,8
What is React concurrent rendering benefits?,"Concurrent rendering allows React to interrupt and resume work, prioritize urgent updates, and keep the UI responsive. It enables features like time slicing, prioritized updates, and better user experience during heavy computations.",react,Remember,1,9
What is React edge runtime compatibility?,"React edge runtime compatibility ensures React applications can run on edge computing platforms like Vercel Edge Functions, Cloudflare Workers, and AWS Lambda@Edge. This requires careful consideration of runtime limitations and API availability.",react,Remember,1,8
What is React hydration mismatch debugging?,"Hydration mismatch occurs when server-rendered HTML differs from client-rendered content. Debugging involves identifying differences in content, props, or component structure between server and client, often caused by dynamic content or browser-specific code.",react,Remember,1,8
What is React performance monitoring tools?,"Performance monitoring tools include React DevTools Profiler, Chrome DevTools, Web Vitals, Lighthouse, bundle analyzers, and performance monitoring services. These tools help identify bottlenecks, measure metrics, and optimize application performance.",react,Remember,1,5
What is React component testing strategies?,"Component testing strategies include unit testing individual components, integration testing component interactions, snapshot testing for UI regression, accessibility testing, and end-to-end testing for complete user flows.",react,Remember,1,5
What is React migration strategies for legacy code?,"Migration strategies include incremental adoption, creating wrapper components, using React in existing applications, gradually converting components, maintaining backward compatibility, and implementing proper testing throughout the migration process.",react,Remember,1,7
What is React code organization and folder structure?,"Code organization includes feature-based folders, component co-location, separating concerns, consistent naming conventions, index files for clean imports, and organizing by domain or functionality rather than file type.",react,Remember,1,4
What is React build optimization and tooling?,"Build optimization includes using modern bundlers like Webpack or Vite, implementing tree shaking, code splitting, minification, source maps, and optimizing assets. Tooling includes linting, formatting, and development servers.",react,Remember,1,6
What is React progressive web app (PWA) integration?,"PWA integration includes service workers for offline functionality, web app manifest for installation, caching strategies, push notifications, and responsive design. React apps can be enhanced with PWA features for native-like experiences.",react,Remember,1,7
What is React internationalization (i18n) implementation?,"Internationalization includes text extraction, translation management, locale-specific formatting, right-to-left language support, date and number formatting, and dynamic locale switching. Libraries like react-i18next help implement i18n features.",react,Apply,3,6
What is React animation and transition best practices?,"Animation best practices include using CSS transitions for simple animations, libraries like Framer Motion for complex animations, optimizing performance with transform and opacity, providing reduced motion options, and ensuring accessibility.",react,Evaluate,5,6
What is React form handling and validation strategies?,"Form handling strategies include controlled components, form libraries like Formik or React Hook Form, validation schemas, error handling, field-level validation, and accessibility considerations for form inputs and error messages.",react,Remember,1,5
What is React data fetching patterns and libraries?,"Data fetching patterns include using useEffect for basic fetching, libraries like React Query or SWR for caching and synchronization, GraphQL with Apollo or Relay, and handling loading states, errors, and optimistic updates.",react,Remember,1,6
What is React mobile development considerations?,"Mobile considerations include responsive design, touch interactions, performance optimization for slower devices, battery usage, network connectivity handling, viewport meta tags, and testing on various screen sizes and devices.",react,Remember,1,5
What is React.experimental_use hook?,React.experimental_use is an experimental hook that allows you to read the value of a Promise or Context directly in the render function. It enables suspense-like behavior for data fetching and simplifies asynchronous data handling in components.,react,Remember,1,9
What is React component lazy loading with dynamic imports?,Component lazy loading uses dynamic imports with React.lazy() to split code and load components only when needed. This reduces initial bundle size and improves application startup performance by deferring non-critical component loading.,react,Remember,1,5
What is React.experimental_Offscreen?,"React.experimental_Offscreen is an experimental component that can hide content without unmounting it, preserving component state and DOM nodes. It's useful for tabbed interfaces, virtualization, and performance optimization scenarios.",react,Remember,1,9
What is React time slicing and its benefits?,Time slicing allows React to break up long-running work into smaller chunks and yield control back to the browser between chunks. This keeps the UI responsive during heavy computations and prevents blocking the main thread.,react,Remember,1,9
What is React.experimental_Cache?,React.experimental_Cache is an experimental component that provides a cache boundary for memoizing expensive computations or data fetching operations. It works with Server Components and helps optimize performance by caching results.,react,Remember,1,9
What is React virtualization and windowing?,"Virtualization renders only visible items in large lists or grids, dramatically improving performance for datasets with thousands of items. Libraries like react-window and react-virtualized implement windowing techniques to manage memory and rendering efficiently.",react,Remember,1,7
What is React.experimental_Activity?,"React.experimental_Activity is an experimental API for tracking user activity and implementing features like automatic logout, session management, and activity-based optimizations. It helps manage application state based on user engagement patterns.",react,Remember,1,9
What is React component communication patterns?,"Component communication patterns include props for parent-to-child, callbacks for child-to-parent, Context for distant relatives, custom hooks for logic sharing, and event systems for decoupled communication between components.",react,Remember,1,4
What is React.experimental_taintUniqueValue?,React.experimental_taintUniqueValue is an experimental API that marks values as sensitive to prevent them from being serialized or passed to client components. It's used for security in Server Components to protect sensitive data.,react,Remember,1,10
What is React.experimental_taintObjectReference?,React.experimental_taintObjectReference is an experimental API that prevents entire objects from being passed to client components. It's a security measure in Server Components to ensure sensitive object references don't leak to the client.,react,Remember,1,10
What is React concurrent features adoption strategy?,"Concurrent features adoption involves gradually enabling features like automatic batching, using startTransition for non-urgent updates, implementing Suspense boundaries, and updating to React 18+ with createRoot API for optimal performance benefits.",react,Remember,1,8
What is React memory management and leak prevention?,"Memory management involves cleaning up subscriptions in useEffect, avoiding closures over stale data, proper event listener removal, clearing timers and intervals, and using weak references where appropriate to prevent memory leaks.",react,Remember,1,6
What is React.experimental_useOptimistic?,React.experimental_useOptimistic is an experimental hook that allows optimistic updates to the UI before server confirmation. It provides immediate feedback to users while handling the actual server response asynchronously.,react,Remember,1,9
What is React server-side caching strategies?,"Server-side caching strategies include HTTP caching headers, CDN caching, server-side memoization, Redis caching, and edge caching. These strategies improve performance by reducing server load and response times for React applications.",react,Remember,1,7
What is React.experimental_useFormStatus?,"React.experimental_useFormStatus is an experimental hook that provides information about form submission status, including pending state, form data, and submission method. It helps create better form user experiences with loading states.",react,Remember,1,8
What is React component composition with slots?,Component composition with slots involves creating flexible components that accept content through named slots or children props. This pattern allows for customizable layouts and reusable component structures without rigid hierarchies.,react,Remember,1,5
What is React.experimental_useFormState?,"React.experimental_useFormState is an experimental hook that manages form state and handles form actions declaratively. It provides form validation, error handling, and submission state management in a more integrated way.",react,Remember,1,8
What is React component testing with Mock Service Worker?,"Mock Service Worker (MSW) allows testing React components by intercepting network requests and providing mock responses. It enables realistic testing of data fetching, API interactions, and error scenarios without actual backend services.",react,Remember,1,7
What is React.experimental_useActionState?,"React.experimental_useActionState is an experimental hook that manages state for server actions and form submissions. It provides pending states, error handling, and result management for asynchronous operations in Server Components.",react,Remember,1,9
What is React component performance profiling techniques?,"Performance profiling techniques include using React DevTools Profiler, measuring render times, analyzing component re-renders, identifying performance bottlenecks, using performance.mark() API, and implementing custom performance metrics.",react,Remember,1,6
What is React.experimental_useResourceEffect?,"React.experimental_useResourceEffect is an experimental hook designed for managing resources in Server Components. It handles resource lifecycle, cleanup, and memory management for server-side operations and data fetching.",react,Remember,1,10
What is React application architecture patterns for scalability?,"Scalable architecture patterns include feature-based organization, domain-driven design, micro-frontends, modular architecture, dependency injection, and clean architecture principles. These patterns help manage complexity as React applications grow.",react,Remember,1,8
